<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
        http://www.springframework.org/schema/mvc 
        http://www.springframework.org/schema/mvc/spring-mvc.xsd   
    http://www.springframework.org/schema/aop 
     http://www.springframework.org/schema/aop/spring-aop-4.1.xsd"
       default-lazy-init="true">
    <tx:annotation-driven />
    <!-- 使用Spring组件扫描的方式来实现自动注入bean -->
    <context:component-scan base-package="com.ylll.**.controller" />
    <context:component-scan base-package="com.ylll.**.core.aop" />
    <context:component-scan base-package="com.ylll.**.service" />
   
    <!-- 启动对@AspectJ注解的支持 -->
    <!--通知spring使用cglib而不是jdk的来生成代理方法 AOP可以拦截到Controller-->  
    <aop:aspectj-autoproxy proxy-target-class="true"/>
    <!-- 注解支持 -->  
    <context:annotation-config/> 
    <!--避免IE执行AJAX时，返回JSON出现下载文件 -->
    <bean id="mappingJackson2HttpMessageConverter"
          class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
        <property name="supportedMediaTypes">
            <list>
                <value>text/html;charset=UTF-8</value>
                <value>text/json;charset=UTF-8</value>
                <value>application/json;charset=UTF-8</value>
            </list>
        </property>
    </bean>
    <!-- 采用SpringMVC自带的JSON转换工具，支持@ResponseBody注解 -->
    <bean
        class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
        <property name="messageConverters">
            <list>
                <ref bean="mappingJackson2HttpMessageConverter" />    <!-- JSON转换器 -->
            </list>
        </property>
    </bean>
    <!-- 对模型视图名称的解析，即在模型视图名称添加前后缀 -->
    <bean
        class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="viewClass"
                  value="org.springframework.web.servlet.view.JstlView" />
        <property name="prefix" value="/WEB-INF/jsp/"/>
        <property name="suffix" value=".jsp"></property>
    </bean>
    <mvc:annotation-driven  validator="validator">
        <!-- 处理responseBody 里面日期类型 -->
        <mvc:message-converters>
            <bean
                class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                <property name="objectMapper">
                    <bean class="com.fasterxml.jackson.databind.ObjectMapper">
                        <property name="dateFormat">
                            <bean class="java.text.SimpleDateFormat">
                                <constructor-arg type="java.lang.String" value="yyyy-MM-dd HH:mm:ss" />
                            </bean>
                        </property>
                    </bean>
                </property>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>
    <!-- 校验器 -->  
    <bean id="validator"  
          class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">  
        <!-- 校验器-->  
        <property name="providerClass" value="org.hibernate.validator.HibernateValidator" />  
        <!-- 指定校验使用的资源文件，在文件中配置校验的错误信息，如果不指定则默认使用classpath下的ValidationMessages.properties -->   
        <property name="validationMessageSource" ref="messageSource" />  
    </bean>  
    <!-- 校验错误信息配置文件 -->  
    <bean id="messageSource"  
          class="org.springframework.context.support.ReloadableResourceBundleMessageSource">  
        <!-- 资源文件名-->  
        <property name="basenames">     
            <list>      
                <value>classpath:validation/ValidationMessages_${project.language}.properties</value>
            </list>     
        </property>  
        <!-- 资源文件编码格式 -->  
        <property name="fileEncodings" value="utf-8" />  
        <!-- 对资源文件内容缓存时间，单位秒 -->  
        <property name="cacheSeconds" value="120" />  
    </bean>  
    <mvc:interceptors>    
        <mvc:interceptor>    
            <!-- 匹配的是url路径， 如果不配置或/**,将拦截所有的Controller -->  
            <mvc:mapping path="/**" />  
            <mvc:exclude-mapping path="/index.html"/> 
            <mvc:exclude-mapping path="/"/> 
            <bean class="com.ylll.core.interceptor.CommonInterceptor"></bean>    
        </mvc:interceptor>  
        <!-- 当设置多个拦截器时，先按顺序调用preHandle方法，然后逆序调用每个拦截器的postHandle和afterCompletion方法 -->  
    </mvc:interceptors> 
    <!-- 配置文件上传，如果没有使用文件上传可以不用配置，当然如果不配，那么配置文件中也不必引入上传组件包 -->
    <bean id="multipartResolver"
          class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <!-- 默认编码 -->
        <property name="defaultEncoding" value="utf-8" />
        <!-- 文件大小最大值 -->
        <property name="maxUploadSize" value="10485760000" />
        <!-- 内存中的最大值 -->
        <property name="maxInMemorySize" value="40960" />
    </bean>
    
</beans>